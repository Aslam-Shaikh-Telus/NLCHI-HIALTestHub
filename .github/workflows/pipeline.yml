# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: mvn clean install

    # Install conventional-changelog-cli to generate CHANGELOG.md
    - name: Install conventional-changelog-cli
      run: |
        npm install -g conventional-changelog-cli

    # Generate/Update CHANGELOG.md based on conventional commits
    - name: Generate changelog
      run: |
        conventional-changelog -p angular -i CHANGELOG.md -s
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Commit the updated CHANGELOG.md to a new branch
    - name: Commit updated CHANGELOG.md
      run: |
        git checkout -b update-changelog
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add CHANGELOG.md
        git commit -m "chore: update CHANGELOG.md for release ${{ env.version }}"
        git push -u origin update-changelog
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Create a Pull Request for the changelog update
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        base: main
        branch: update-changelog
        title: "Update CHANGELOG.md for release ${{ env.version }}"
        body: "This pull request updates the CHANGELOG.md file."

    # Ensure the repository is in sync with the `update-changelog` branch before creating the tarball
    - name: Checkout update-changelog branch
      run: git checkout update-changelog

    # Create HIALTestHub.tar.gz package while excluding unwanted folders
    - name: Create HIALTestHub.tar.gz package
      run: |
        tar --exclude='unwanted_folder_1' --exclude='unwanted_folder_2' -czf HIALTestHub.tar.gz bin/ config/ data/ pom.xml target/*.jar CHANGELOG.md

    # Upload the HIALTestHub.tar.gz as an artifact
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: HIALTestHub
        path: HIALTestHub.tar.gz

    # Determine the next version based on the latest tag
    - name: Determine next version
      id: version
      run: |
        latest_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")
        echo "Latest tag: $latest_tag"
        IFS='.' read -r major minor patch <<< "${latest_tag#v}"
        new_patch=$((patch+1))
        new_version="v$major.$minor.$new_patch"
        echo "New version: $new_version"
        echo "version=$new_version" >> $GITHUB_ENV

    # Tag the release
    - name: Tag the release
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ env.version }} -m "Release ${{ env.version }}"
        git push origin ${{ env.version }}

    # Create a GitHub Release and upload the HIALTestHub.tar.gz package as an asset
    - name: Create GitHub Release
      uses: actions/create-release@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}  # <-- Token added here
        tag_name: ${{ env.version }}
        release_name: HIALTestHub Release ${{ env.version }}
        body: |
          Release notes for HIALTestHub version ${{ env.version }}.
        draft: false
        prerelease: false

    # Upload HIALTestHub.tar.gz as the release asset
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: HIALTestHub.tar.gz
        asset_name: HIALTestHub-${{ env.version }}.tar.gz
        asset_content_type: application/gzip

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: hialtesthub

      - name: Start SSH Agent and Add Key
        run: |
          eval $(ssh-agent -s)  # Start the SSH agent
          echo "${{ secrets.SERVER_SSH_KEY }}" | tr -d '\r' | ssh-add -  # Add the private key
        env:
          SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}

      - name: Deploy to Linux server
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          echo "Testing SSH connection to $SERVER_USER@$SERVER_IP"
          ssh -o StrictHostKeyChecking=no -v $SERVER_USER@$SERVER_IP "echo Connection successful"
